1일차-프로그램 설치/회사가서 할 줄 아는게 좋음/참고할만한 블로그 즐겨찾기 넣어두기
(출자지원)
2일차-
탐색적 데이터 분석->파이썬을 사용할 것->시각화를 집중적으로 볼 것
1)의사결정 2)가설을 위한 검증단계 3) 사람(편향적이면 안 됨)
전공과 비전공은 중요하지 않음. 일을 할 수 있냐만 중요.
의사결정권자는 시간이 없음. 숫자가 많으면 오판을 하게 됨
그래서 시각화 필수.
포트폴리오때 지도에다가 시각화 시키는게 가장 임팩트

컴퓨터 기본이론(CS)을 한번 더 할 것
-반드시 있어야하는 것: 메모리, CPU, 프로그램
ex) 실현해보면 달러표 끝에 옮기는 프로그램임-다시 해보자
프로그램을 CPU가 읽어서 메모리에 가져다주는 것
모든 프로그램은 메모리에서 동작하는 것을 베이스로 함.
그래서 어떻게 메모리를 손쉽게 제어할 수 있는가?를 배울 것
그래서 메모리에 직접 접근할 수 있는 C의 *를 배우는 것
-이득은 뭔가? 속도가 겁나 빠름.
구글은 C가 상당히 중요함(Intel, Nvidia) 근데 한국회사에선 안 뽑음

메모리와 관련된 개념이 뭐야?-변수

공리
1.모든 프로그램은 '반드시' 메모리(주기억장치)에서 실행된다. 예외는 없다.
2. 메모리는 모든 값을 0과 1로 저장한다. 예외는 없다.
-이 2가지가 메모리와 관련된 가장 중요한 이론임
-malloc:메모리에 공간이 없으면 null, 있으면 그 주소의 첫번째 값
3. 모든 프로그램은 입력-처리-출력으로 구성되고 , 그 형태를 반복한다
4. 모든 입력은 제어할 수 없으며, 출력만 제어해야한다.
5. CPU는 머신코드만 처리할 수 있다.

파이썬은 프로그래밍 랭귀지
한글은 코리안 랭귀지
언어는 읽고 쓰고 말하는데 중점을 둠
내가 컴퓨터와 대화하기 위해 만들어진게 프로그래밍 랭귀

graduate_path=f'문자열' - 저 문자열을 graduate_path에 저장한다.
저 문자열이 메모리에 저장되는데 그곳의 이름을 graduate_path라 할당시킴
(=:대입연산자, 영어로 하면 assignment)
컴퓨터는 알아서 하지 않음. 내가 하나부터 열까지 다 과제로 줘야함.
기계가 생각보다 엄청 멍청함.
graduate_path=f'문자열' <->변수명=값(Value)

graduate_path=f'문자열'
raw_graduate=pd.read_excel() 
이 두개는 넓게 보면 결국 메모리에 저장되는 부분에서는 같다
하나는 기능이 있고 하나는 기능이 없을 뿐.

튜토리얼에서 8절까지 볼꺼야

comment 부족한 것을 채워준다(주석)
파이썬은 #붙이고 쓰면 됨

데이터 분석가는 주석을 많이 쓰고
컴공은(엔지니어) 주석 쓰지마셈-가독성을 높혀라

Notebook에서
파랗게 되었을 때를 명령모드
Insert로 cell 추가
Edit의 delete로 삭제
단축키 a가 위에 추가, b가 밑에 추가
m누르면 markdown으로 바뀜
shift enter-Run
사칙연산의 우선순위를 따라감
자료형이 너무 유연함(ex)8/5=1.6)-파이썬이 타입이론을 박살냄

컴공은 타입을 제대로 다뤄야함.
데이터분석가라면? 일관적인 원칙이 필요함.
(소숫점 셋째자리에서 반올림한다던지...)
17%3=2 (나머지)
2**7=128 (power)

Restart&Run All키 누르면 한번에 실행됨.
변수를 만들어서 숫자를 집어넣음
메모리에 20을 집어넣고 그 이름을 width라 하고
변수에 네이밍을 해서 활용할 수 있다는건 강력한 능력

name 'qwer1234' is not defined
메모리에 qwer1234가 가리키고 있는게 없어서 줄 값이 없다는 뜻
메모리에 값을 만들고 거기에 넣어서 쓰는 것

실수 연산이 하나라도 들어가면 실수로 값이 나옴

언더바 같은 쓸데 없는거 쓰지말고 새로운 변수에 넣어서 쓰셈
round-반올림

문자열
"", ''의 차이
""안에 ""가 있을때 오류가 날 수 있기에
밖을 ''로 두고 안을 ""로 둔다 (차이성)
일반적으로 파이썬에서는 ''을 많이 쓴다.
프린터는 많이 쓰지 않을 것임

문자에 숫자 곱하지 마라, 

리스트 
특성: 어떤 숫자를 추가할 수 있음, 매우 많이도 가능, 문자도 가능
장점: 데이터를 한번에 처리할 수 있음.

리스트라는 문법 index[]를 사용
1)[ , , , ]리스트임을 나타냄 (외형), 
특정 위치에 있는 값을 가지고 오고 싶을 때 사용하는 것을 index라 함
index는 0부터 시작한다
왜냐면 수학에서 10진수를 0-9로 표현함
2진수면 0-1을 사용.

2)

내가 다루는 건 표임. 근데 내가 아는건 리스트
표<-리스트

표를 리스트로 만들던가 리스트를 표로 만들던가가 필요함
그게 안되면 데이터 분석이 불가함.

그래서 표를 리스트로 재구성해보자.
3x3 표를 012,345,678 List1,2,3로 만드는 것
표=[List1, List2, List3]
세로로는 안되는가? 

일반 표는 행(row)우선임-표를 행의 집합이라고 생각하겠다는 것(C, Python, Java)
행을 우선으로 하기 때문에 '열'을 다루는 기능을 줘야함

행을 열우선으로 구성할 수도 있긴함.(Matlab, Fotran) 
마찬가지로 + '행'을 다루는 기능을 줘야함

그래서 전치(transpose)시켜주는 법을 알아야함

판다스는 행보다 열로 가져오는데 특화되어있음.
왜? 표를 쓸 때 맨 윗줄에는 속성을 씀 
왼쪽에 번호를 넣음
그래서 판다스가 데이터가 다루는 방법을 파이썬에 제공함
컬럼을 먼저, (파이썬은 행우선이기에, tranpose해도 어려움)

컬럼을 손을 대서 새로운 데이터를 추출하는걸 전처리라함
전처리가 왜 필요한가? 필요한 데이터를 가공하려고, 시간 단축

이 모든 말이 맞지만
-전처리를 하는 것은 원본 데이터를 함부로 수정하면 안되기 때문에
원본데이터를 직접하지 않고 select_col처럼 원본데이터에서
내가 쓰고 싶은 곳을 가지고 와서 거기다가 수정해야함
(원본은 건드리지마라)

콤마로는 더 되지 않아서 리스트를 씌우는것