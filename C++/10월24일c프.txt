코딩 => 9장부터 잘해야 된다.
9장부터 점수 올라가면 보너스 점수!


다음 주 화요일 휴강
다음 주 목요일 9장 퀴즈만 친다!+9장 실습
11월5일날 9장 코딩시험!!


scanf()
printf()
=>%출력
while
for

function, array

c => c++ => 자료구조 => 알고리즘 => 딥러닝,빅테이터
	 =>window program

9.2 ANSI(American National )C Function Prototyping
function’s return type을 명시해야 한다, 그러나 function  arguments는 생략 가능.

9.2.1 Problem
calling function은 function arguments를 임시 storage area인  stack에 저장

main()
{
imax(3.,5.);  #함수 호출 => return값이 나온다
}
imax(n,m)
{
return
}

n,m => formal argument, local variable
3,5 => actual argument
stack => 더미 마지막에 쌓인 놈을 먼저 꺼낸다. last in first out


| |
|3|=>3부터 꺼낸다
|2|
|1|

9.2.3 No Arguments와 Unspecified Arguments
void print_name();
-it will not check arguments.
void print_name(void);
-function call에서 arguments를 사용하지 않는다
printf()와  scanf() , 
-가변 갯수의 arguments를 사용
int printf(const char *, ...);

9.3 Recursion (중요) 재귀
-C에서 function이 자기 자신을 호출하는 것: recursion
void up_and_down(int); //return 값이 없는 경우의 recursion
int main(void)
{
	up_and_down(1); 
	system("pause");
	return 0;
}
void up_and_down(int n)
{
	printf("Level %d: n location %p\n", n, &n); // %p는 주소를 출력하는 데 사용되는 format specifier
	if (n < 4)
		up_and_down(n + 1);
	printf("LEVEL %d: n location %p\n", n, &n); // 2
}

f5 => main() => updown(1) => updown(1) 
			    updown(2) => updown(2)
				           updown(3) =>updown(3)
						     if(n<4)
						     updown(4) => updown(4)
								if(n<4)
	          printf()    <=  printf()     <=prinf()       <=  printf()       <=print()

%d %f %lf %s %e %c=>format specifier %p =>변수의 메모리 주소값출력할때=>format specifier

Recursion 실행시 변수 값 변화

--------------------------------------------
if (n > 0)
	ans = n * rfact(n - 1);
else
	ans = 1;
return ans;
== 같다
return ((n > 0) ? n * rfact(n - 1) : 1);//quiz 문제임
----------------------------------------------

fibonacci series

f(n) = f(n-1) =f(n-2)
f(0)=0 f(1)=1
f(2)=1
f(3)=f(2)+f(1)
f(n)=f(n-1)+f(n-2);
=>recursion으로 작성 할 수 있다
int fibo_rec(int n)
{
	if (n = 0)	
		return 0;	
	else if (n = 1)	
		return 1;
	
	else
		return fibo_rec(n - 1)+fibo_rec(n-2);
}
recursive function,recurrence relation

9.3.4 Recursion 찬반
유익한 점 recursion은 programming problems에 대한  simplest solution을 제공.
나쁜점: recursive algorithms은 메모리를 많이 사용할 가능성(stack을 사용해서 시간을 많이 잡아먹는다)

9.4 Addresses를 구하는 방법: &  Operator
scanf("%d",&n)
& operator :variable이 저장된 주소를 나타냄

local vairable

global variable

main 바깥에(위에)
int count=0;
main
{
count++
mikado()
printf(count)
}
void mikado()
{
count++
}
>>> 2

count의 scope(범위) => 전체! =>global


9.5 호출 함수에서 Variables 변경 
function이 variables의 값을 변경하기를 원할 때
local variable에 대한 실습: actutal arguments와 formal parameters의 address를 출력하여 확인
listing 9.13 !!

main()
	interchange(5,10)  -> interchan(u,v)
			<-

pointer
listing 15
*u => 주소를 넘긴다
interchange(&x, &y);
-function은 addresses를 전달한다 .
-interchange(x, y)로 호출시 문제점을 실습
void interchange (int * u, int * v)
-interchange( int u, int v)로 선언시 문제점을 실습
-pointer u, v의 address를 출력하여 x,y의 address와 비교하여 실습


-	pointer  : variable (또는 더 일반적으로 얘기하면 data object을 가리킴)로서 그것의 값이 memory address
ptr = &pooh;  // 변수 pooh의 address를 ptr에 치환한다

-	ptr과 &pooh 차이:  ptr은 variable, &pooh은 constant.
?	ptr은 modifiable lvalue, &pooh은 rvalue.


간접 Operator:  *
indirection operator * 를 사용: ptr이 가르키는 값을 가져오는 것 
(dereferencing  operator라고 부름)

main()
	intx,y;
	interchange(&x,&y)

interchange(*u,*v)
{
}

u=&x

int *u =&x;
 => *u-pointer &x-address

int x=10;
int *p;
p=&x;
(*p)++
=> x값이 증가

int data[10]={1,2,3,4,5,6,7,8,9,10};
array
